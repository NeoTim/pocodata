{
  "api/Unosquare.PocoData.Annotations.KeyAttribute.html": {
    "href": "api/Unosquare.PocoData.Annotations.KeyAttribute.html",
    "title": "Class KeyAttribute | Unosquare PocoData",
    "keywords": "Class KeyAttribute Specifies that that the property this attribute is applied to is a key column. Inheritance Object Attribute KeyAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData.Annotations Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class KeyAttribute : Attribute, _Attribute Constructors KeyAttribute(Boolean) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(bool isGenerated) Parameters Type Name Description Boolean isGenerated if set to true the value is generated by the database. Properties IsGenerated Gets a value indicating whether the column value is generated by the database. Declaration public bool IsGenerated { get; } Property Value Type Description Boolean Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.Annotations.RequiredAttribute.html": {
    "href": "api/Unosquare.PocoData.Annotations.RequiredAttribute.html",
    "title": "Class RequiredAttribute | Unosquare PocoData",
    "keywords": "Class RequiredAttribute When applied to a property, it tells the underlying table the value cannot be null. Inheritance Object Attribute RequiredAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData.Annotations Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class RequiredAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.Annotations.TableAttribute.html": {
    "href": "api/Unosquare.PocoData.Annotations.TableAttribute.html",
    "title": "Class TableAttribute | Unosquare PocoData",
    "keywords": "Class TableAttribute When applied to a class, it specifies the table it maps to. Inheritance Object Attribute TableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData.Annotations Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false)] public sealed class TableAttribute : Attribute, _Attribute Constructors TableAttribute(String) Initializes a new instance of the TableAttribute class with a default empty schema. Declaration public TableAttribute(string name) Parameters Type Name Description String name The name. TableAttribute(String, String) Initializes a new instance of the TableAttribute class. Declaration public TableAttribute(string name, string schema) Parameters Type Name Description String name The name of the table. String schema The name of the schema. Properties Name Gets the name of the table the class maps to. Declaration public string Name { get; } Property Value Type Description String QualifiedName Gets the qualified name of the table including schema. Declaration public string QualifiedName { get; } Property Value Type Description String Schema Gets the schema of the table this class maps to. Declaration public string Schema { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.PocoTableProxy-1.html": {
    "href": "api/Unosquare.PocoData.PocoTableProxy-1.html",
    "title": "Class PocoTableProxy<T> | Unosquare PocoData",
    "keywords": "Class PocoTableProxy<T> Provides stronly-typed data access operations for the specified table-mapped type. Inheritance Object PocoTableProxy<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData Syntax public class PocoTableProxy<T> where T : class, new() Type Parameters Name Description T The table-mapped type. Constructors PocoTableProxy(IPocoDb, Boolean) Initializes a new instance of the PocoTableProxy<T> class. Declaration public PocoTableProxy(IPocoDb pocoDb, bool createIfNotExists) Parameters Type Name Description IPocoDb pocoDb The associated database. Boolean createIfNotExists if set to true creates the backing table if it does not exist. Properties Columns Gets the column metadata. Declaration public IReadOnlyList<ColumnMetadata> Columns { get; } Property Value Type Description IReadOnlyList < ColumnMetadata > PocoDb Gets the associated database container object. Declaration public IPocoDb PocoDb { get; } Property Value Type Description IPocoDb Table Gets the table metadata. Declaration public TableAttribute Table { get; } Property Value Type Description TableAttribute TableExists Gets a value indicating whether the associated table exists. Declaration public bool TableExists { get; } Property Value Type Description Boolean Methods CountAll() Counts all the rows in the mapped table. Declaration public int CountAll() Returns Type Description Int32 The number of rows in the table. CountAllAsync() Asynchronously counts all the rows in the mapped table. Declaration public Task<int> CountAllAsync() Returns Type Description Task < Int32 > The number of rows in the table. CreateTable() Creates the table for the associated table-mapped type. Declaration public void CreateTable() Delete(T) Deletes the specified object. Declaration public int Delete(T item) Parameters Type Name Description T item The object to delete. Returns Type Description Int32 The number of affected rows. DeleteAsync(T) Asynchronously deletes the specified object. Declaration public Task<int> DeleteAsync(T item) Parameters Type Name Description T item The object to delete. Returns Type Description Task < Int32 > The number of affected rows. DropTable() Deletes the table for the associated table-mapped type. Declaration public void DropTable() Insert(T, Boolean) Inserts a single object into its corresponding mapped table. Declaration public int Insert(T item, bool update) Parameters Type Name Description T item The item. Boolean update if set to true updates all the fields after the insert in addition to the autogenerated key value. Returns Type Description Int32 The number of affected rows. InsertAsync(T, Boolean) Asynchronously inserts a single object into its corresponding mapped table. Declaration public Task<int> InsertAsync(T item, bool update) Parameters Type Name Description T item The item. Boolean update if set to true updates all the fields after the insert in addition to the autogenerated key value. Returns Type Description Task < Int32 > The number of affected rows. InsertMany(IEnumerable<T>, Boolean) Inserts many objects into their corresponding mapped table. Declaration public int InsertMany(IEnumerable<T> items, bool update) Parameters Type Name Description IEnumerable <T> items The items to insert. Boolean update if set to true updates all the fields after the insert in addition to the autogenerated key value. Returns Type Description Int32 The number of affected rows. InsertManyAsync(IEnumerable<T>, Boolean) Asynchronously inserts many objects into their corresponding mapped table. Declaration public Task<int> InsertManyAsync(IEnumerable<T> items, bool update) Parameters Type Name Description IEnumerable <T> items The items to insert. Boolean update if set to true updates all the fields after the insert in addition to the autogenerated key value. Returns Type Description Task < Int32 > The number of affected rows. SelectAll() Selects all table records. Declaration public IEnumerable<T> SelectAll() Returns Type Description IEnumerable <T> The table records as objects. SelectAllAsync() Asynchronously selects all table records. Declaration public Task<IEnumerable<T>> SelectAllAsync() Returns Type Description Task < IEnumerable <T>> The table records as objects. SelectMany(IDbCommand) Executes a reader on the specified command and returns the results as objects. Declaration public IEnumerable<T> SelectMany(IDbCommand command) Parameters Type Name Description IDbCommand command The command. Returns Type Description IEnumerable <T> The list of objects. SelectManyAsync(IDbCommand) Asynchronously executes a reader on the specified command and returns the results as objects. Declaration public Task<IEnumerable<T>> SelectManyAsync(IDbCommand command) Parameters Type Name Description IDbCommand command The command. Returns Type Description Task < IEnumerable <T>> The list of objects. SelectSingle(T) Selects a single record from the table-mapped type by matching key column values. Declaration public bool SelectSingle(T target) Parameters Type Name Description T target The target. Returns Type Description Boolean Whether the selection was matched. SelectSingleAsync(T) Asynchronously selects a single record from the table-mapped type by matching key column values. Declaration public Task<bool> SelectSingleAsync(T target) Parameters Type Name Description T target The target. Returns Type Description Task < Boolean > Whether the selection was matched. Update(T) Updates a single object into its corresponding mapped table. Declaration public int Update(T item) Parameters Type Name Description T item The item to update. Returns Type Description Int32 The number of affected rows. UpdateAsync(T) Asynchronously updates a single object into its corresponding mapped table. Declaration public Task<int> UpdateAsync(T item) Parameters Type Name Description T item The item to update. Returns Type Description Task < Int32 > The number of affected rows. UpdateMany(IEnumerable<T>) Updates many objects in their corresponding mapped table. Declaration public int UpdateMany(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items The items to update. Returns Type Description Int32 The number of affected rows. UpdateManyAsync(IEnumerable<T>) Asynchronously updates many objects in their corresponding mapped table. Declaration public Task<int> UpdateManyAsync(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items The items to update. Returns Type Description Task < Int32 > The number of affected rows. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.SchemaExtensions.html": {
    "href": "api/Unosquare.PocoData.SchemaExtensions.html",
    "title": "Class SchemaExtensions | Unosquare PocoData",
    "keywords": "Class SchemaExtensions Provides extension methods to configure schema mappings with a fluent API and without the need for attibutes. Examples: typeof(Employee).Table().ToTable(nameof(Employee)); typeof(Employee).Column(nameof(Employee.Children)).IsNullable();. Inheritance Object SchemaExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData Syntax public static class SchemaExtensions Methods Column(Type, String) Gets the complumn metadata for the given type and property name. Declaration public static ColumnMetadata Column(this Type mappedType, string propertyName) Parameters Type Name Description Type mappedType The table-mapped type. String propertyName Name of the property. Returns Type Description ColumnMetadata The column metadata. HasColumnName(ColumnMetadata, String) Updates column metadata with a mapping to a column name. Declaration public static ColumnMetadata HasColumnName(this ColumnMetadata column, string name) Parameters Type Name Description ColumnMetadata column The column. String name The name of the column to map to. Returns Type Description ColumnMetadata The column metadata. HasStringLength(ColumnMetadata, Int32) Updates column metadata letting the mapper know the maximum string length of the property. Declaration public static ColumnMetadata HasStringLength(this ColumnMetadata column, int stringLength) Parameters Type Name Description ColumnMetadata column The column. Int32 stringLength Length of the string. Returns Type Description ColumnMetadata The column metadata. IsGeneratedKeyColumn(ColumnMetadata) Updates column metadata letting the mapper know the property represents a key column whose values are generated by the data store. Declaration public static ColumnMetadata IsGeneratedKeyColumn(this ColumnMetadata column) Parameters Type Name Description ColumnMetadata column The column. Returns Type Description ColumnMetadata The column metadata. IsKeyColumn(ColumnMetadata) Updates column metadata letting the mapper know the property represents a key column. Declaration public static ColumnMetadata IsKeyColumn(this ColumnMetadata column) Parameters Type Name Description ColumnMetadata column The column. Returns Type Description ColumnMetadata The column metadata. IsNullable(ColumnMetadata) Updates column metadata letting the mapper know the property can contain null values. Declaration public static ColumnMetadata IsNullable(this ColumnMetadata column) Parameters Type Name Description ColumnMetadata column The column. Returns Type Description ColumnMetadata The column metadata. NotMapped(ColumnMetadata) Updates column metadata letting the mapper know it should ignroe the property. Declaration public static ColumnMetadata NotMapped(this ColumnMetadata column) Parameters Type Name Description ColumnMetadata column The column. Returns Type Description ColumnMetadata The column metadata. Table(Type) Gets the table metadata for the given type. Declaration public static TableAttribute Table(this Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description TableAttribute The table metadata. ToTable(TableAttribute, String) Maps a type to the specified table name and schema. Declaration public static TableAttribute ToTable(this TableAttribute table, string tableName) Parameters Type Name Description TableAttribute table The table. String tableName Name of the table. Returns Type Description TableAttribute The table attribute. ToTable(TableAttribute, String, String) Maps a type to the specified table name and schema. Declaration public static TableAttribute ToTable(this TableAttribute table, string tableName, string schemaName) Parameters Type Name Description TableAttribute table The table metadata. String tableName Name of the table. String schemaName Name of the schema. Returns Type Description TableAttribute The table attribute. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.Sql.html": {
    "href": "api/Unosquare.PocoData.Sql.html",
    "title": "Namespace Unosquare.PocoData.Sql | Unosquare PocoData",
    "keywords": "Namespace Unosquare.PocoData.Sql Classes SqlPocoDb Provides a SQL Server-specific implementation of a POCO database functionality. SqlPocoUtilities Provides extension methods for database commands and their parameters. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.html": {
    "href": "api/Unosquare.PocoData.html",
    "title": "Namespace Unosquare.PocoData | Unosquare PocoData",
    "keywords": "Namespace Unosquare.PocoData Classes ColumnMetadata Represents aggregated information about the data related attributes applied to properties. PocoReader Provides helper methods to read row data into POCOs. PocoSchema Storeas table and column mappings and their corresponding metadata. PocoTableProxy<T> Provides stronly-typed data access operations for the specified table-mapped type. SchemaExtensions Provides extension methods to configure schema mappings with a fluent API and without the need for attibutes. Examples: typeof(Employee).Table().ToTable(nameof(Employee)); typeof(Employee).Column(nameof(Employee.Children)).IsNullable();. Interfaces IPocoCommands Represents an interface with methods to generate standard commands. IPocoDb Defines standard database fields and methods to store, retrieve, update and delete data from a backing store. IPocoDefinition Provides methods to execute DDL commands on the database. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "README.html": {
    "href": "README.html",
    "title": "PocoData | Unosquare PocoData",
    "keywords": "PocoData The no-frills micro ORM for SQL Server ⭐ Please star this project if you like it This library provides simplified access to data stores. Initially we only support SQL Server but the library can easily be extended to support other databases. Please not that data relations are not supported. You will need to implement those manually. Properties referencing other objects will not be persisted or mapped by this library. Only strings, enums and value types (along with their nullable counterparts) are supported. The usage is straightforward. There are 2 separate NuGet packages: PocoData and PocoData.Sql. The packages have been spearated as sometimes you need a share data model class library across your applications. In that case you don't need to install the PocoData.Sql NuGet package in your shared class library. Only install the PocoData.Sql package in the project where you actually perform the data access. You can create data models easily enough by adding attributes to your data model classes and their properties. For example. using System; using Unosquare.PocoData.Annotations; // Make sure you import the namespace containing the data annotations. [Table(\"Employees\")] public class Employee { public Employee() { // a default constructor is not required but highly recommended. } [Key(true)] // Tells the mapper this property is part of a primary key and that its value is generated by the DB. public int EmployeeId { get; set; } [Required] // This string will be set as NOT NULL [StringLength(300)] // You can specify the string length. By default it is 255 characters. public string FullName { get; set; } public string EmailAddress { get; set; } public DateTime DateOfBirth { get; set; } public int? Children { get; set; } public MaritalStatus MaritalStatus { get; set; } // example of an enum (values will be stored as integers) public object Reserved { get; set; } // this will be ignored by the mapper. [NotMapped] // You can mark fields as not mapped. public int HashCode { get; set; } public override string ToString() { return $\"{EmployeeId} {FullName} {EmailAddress} {MaritalStatus} {DateOfBirth} {Children}\"; } } If you can't add attributes to existing classes, you could also use the fluent API typeof(Employee).Table().ToTable(\"Employees\"); typeof(Employee).Column(nameof(Employee.EmployeeId)).IsGeneratedKeyColumn(); Create your database container class using System.Collections.Generic; using System.Data.SqlClient; using System.Threading.Tasks; using Unosquare.PocoData.Sql; public class SampleDb : SqlPocoDb { public SampleDb() : base($\"Data Source=.; Integrated Security=True; Initial Catalog=pocodata; MultipleActiveResultSets=True;\") { Employees = new EmployeesTable(this); } public EmployeesTable Employees { get; } // you could get a default table proxy for the type but this shows you // how to create your own table proxy with extended functionality. public class EmployeesTable : PocoTableProxy<Employee> { public EmployeesTable(IPocoDb db) : base(db, true) { // placeholder } public async Task<IEnumerable<Employee>> GetYoungEmployeesAsync() { var command = PocoDb.Connection.CreateCommand() as SqlCommand; command.CommandText = PocoDb.Commands.SelectAllCommandText(typeof(Employee)) + $\" WHERE YEAR(DateOfBirth) >= @Year\"; command.AddParameter(\"@Year\", 1990); return await SelectManyAsync(command); } } } Finally, use your database container class. using (var db = new SampleDb()) { var employees = new List<Employee>(); employees.AddRange(await db.Employees.SelectAllAsync()); var youngEmployees = await db.Employees.GetYoungEmployeesAsync(); foreach (var e in youngEmployees) e.Children = null; var updates = await db.Employees.UpdateManyAsync(youngEmployees); }"
  },
  "api/Unosquare.PocoData.Annotations.NotMappedAttribute.html": {
    "href": "api/Unosquare.PocoData.Annotations.NotMappedAttribute.html",
    "title": "Class NotMappedAttribute | Unosquare PocoData",
    "keywords": "Class NotMappedAttribute When applied to a property it ignores it for mapping it to a column. Inheritance Object Attribute NotMappedAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData.Annotations Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class NotMappedAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.Annotations.StringLengthAttribute.html": {
    "href": "api/Unosquare.PocoData.Annotations.StringLengthAttribute.html",
    "title": "Class StringLengthAttribute | Unosquare PocoData",
    "keywords": "Class StringLengthAttribute When applied to a string typed property, it specifies the length of the string to store in the column definition. Inheritance Object Attribute StringLengthAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData.Annotations Syntax [AttributeUsage(AttributeTargets.Property)] public class StringLengthAttribute : Attribute, _Attribute Constructors StringLengthAttribute(Int32) Initializes a new instance of the StringLengthAttribute class. Declaration public StringLengthAttribute(int length) Parameters Type Name Description Int32 length The string length. Properties Length Gets the specified string length. Declaration public int Length { get; } Property Value Type Description Int32 Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.Annotations.html": {
    "href": "api/Unosquare.PocoData.Annotations.html",
    "title": "Namespace Unosquare.PocoData.Annotations | Unosquare PocoData",
    "keywords": "Namespace Unosquare.PocoData.Annotations Classes ColumnAttribute Maps a property to a column name. KeyAttribute Specifies that that the property this attribute is applied to is a key column. NotMappedAttribute When applied to a property it ignores it for mapping it to a column. RequiredAttribute When applied to a property, it tells the underlying table the value cannot be null. StringLengthAttribute When applied to a string typed property, it specifies the length of the string to store in the column definition. TableAttribute When applied to a class, it specifies the table it maps to. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.ColumnMetadata.html": {
    "href": "api/Unosquare.PocoData.ColumnMetadata.html",
    "title": "Class ColumnMetadata | Unosquare PocoData",
    "keywords": "Class ColumnMetadata Represents aggregated information about the data related attributes applied to properties. Inheritance Object ColumnMetadata Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData Syntax public sealed class ColumnMetadata Properties ColumnName Gets the name of the column the property maps to. Declaration public string ColumnName { get; } Property Value Type Description String IsKeyColumn Gets a value indicating whether the property represents a key column. Declaration public bool IsKeyColumn { get; } Property Value Type Description Boolean IsKeyGenerated Gets a value indicating whether the property represents a key which has its value generated by the database such as identity columns or autonumbers. Declaration public bool IsKeyGenerated { get; } Property Value Type Description Boolean IsNullable Gets a value indicating whether the column accepts nulls. Declaration public bool IsNullable { get; } Property Value Type Description Boolean NativeType Gets the CLR underlying type of the property. This for nullables it returns the underlying types. It does so for enums as well. Declaration public Type NativeType { get; } Property Value Type Description Type ParameterName Gets the name of the parameter to be used. This is simply the property name preceeded by an at symbol. Declaration public string ParameterName { get; } Property Value Type Description String Property Gets the property. Declaration public PropertyInfo Property { get; } Property Value Type Description PropertyInfo PropertyName Gets the name of the property. Declaration public string PropertyName { get; } Property Value Type Description String QualifiedName Gets the qualified name of the column. Declaration public string QualifiedName { get; } Property Value Type Description String StringLength Gets the string length. Declaration public int StringLength { get; } Property Value Type Description Int32 Methods GetDefault() Gets the default value of the property type. Declaration public object GetDefault() Returns Type Description Object The default value. GetValue(Object) Gets the value for the given property via a stored delegate. This is a high performance way of retrieving property values dynamically. Declaration public object GetValue(object instance) Parameters Type Name Description Object instance The instance. Returns Type Description Object The property value. SetValue(Object, Object) Sets the value for the given property via a stored delegate. This is a high performance way of setting property values dynamically. Declaration public void SetValue(object instance, object value) Parameters Type Name Description Object instance The instance. Object value The value. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.IPocoCommands.html": {
    "href": "api/Unosquare.PocoData.IPocoCommands.html",
    "title": "Interface IPocoCommands | Unosquare PocoData",
    "keywords": "Interface IPocoCommands Represents an interface with methods to generate standard commands. Namespace : Unosquare.PocoData Syntax public interface IPocoCommands Methods CountAllCommandText(Type) Gets the command text to count all records of the given type. Declaration string CountAllCommandText(Type mappedType) Parameters Type Name Description Type mappedType The type that is mapped to the database. Returns Type Description String The generated command text. CreateCountAllCommand(Type) Creates a command to count all records of the given type. Declaration IDbCommand CreateCountAllCommand(Type mappedType) Parameters Type Name Description Type mappedType The type that is mapped to the database. Returns Type Description IDbCommand The generated command text. CreateDeleteCommand(Object) Creates a command to delete a single record of the given object. Declaration IDbCommand CreateDeleteCommand(object mappedObject) Parameters Type Name Description Object mappedObject The mapped object. Returns Type Description IDbCommand The generated command. CreateInsertCommand(Object) Creates a command to insert a single record of the given object. Declaration IDbCommand CreateInsertCommand(object mappedObject) Parameters Type Name Description Object mappedObject The mapped object. Returns Type Description IDbCommand The generated command. CreateSelectAllCommand(Type) Creates a command to select all records of the given type. Declaration IDbCommand CreateSelectAllCommand(Type mappedType) Parameters Type Name Description Type mappedType The type that is mapped to the database. Returns Type Description IDbCommand The generated command. CreateSelectSingleCommand(Object) Creates a command to select a single record matching the key columns of the given object. Declaration IDbCommand CreateSelectSingleCommand(object mappedObject) Parameters Type Name Description Object mappedObject The mapped object. Returns Type Description IDbCommand The generated command. CreateUpdateCommand(Object) Creates a command to update a single record of the given object. Declaration IDbCommand CreateUpdateCommand(object mappedObject) Parameters Type Name Description Object mappedObject The mapped object. Returns Type Description IDbCommand The generated command. DeleteCommandText(Type) Gets the command text to delete a single record of the given type. Declaration string DeleteCommandText(Type mappedType) Parameters Type Name Description Type mappedType The type that is mapped to the database. Returns Type Description String The generated command text. InsertCommandText(Type) Gets the command text to inset a single record of the given type. Declaration string InsertCommandText(Type mappedType) Parameters Type Name Description Type mappedType The type that is mapped to the database. Returns Type Description String The generated command text. SelectAllCommandText(Type) Gets the command text to select all records. Declaration string SelectAllCommandText(Type mappedType) Parameters Type Name Description Type mappedType The type that is mapped to the database. Returns Type Description String The generated command text. SelectSingleCommandText(Type) Gets the command text to select a single record by its key column values. Declaration string SelectSingleCommandText(Type mappedType) Parameters Type Name Description Type mappedType The type that is mapped to the database. Returns Type Description String The generated command text. UpdateCommandText(Type) Gets the command text to update a single record of the given type. Declaration string UpdateCommandText(Type mappedType) Parameters Type Name Description Type mappedType The type that is mapped to the database. Returns Type Description String The generated command text. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.IPocoDb.html": {
    "href": "api/Unosquare.PocoData.IPocoDb.html",
    "title": "Interface IPocoDb | Unosquare PocoData",
    "keywords": "Interface IPocoDb Defines standard database fields and methods to store, retrieve, update and delete data from a backing store. Namespace : Unosquare.PocoData Syntax public interface IPocoDb Properties Commands Provides a helper object containing methods to generate commands for standard operations. Declaration IPocoCommands Commands { get; } Property Value Type Description IPocoCommands Connection Gets the database connection object. Declaration IDbConnection Connection { get; } Property Value Type Description IDbConnection Definition Provides a helper object containing methods to create and delete tables. Declaration IPocoDefinition Definition { get; } Property Value Type Description IPocoDefinition ObjectReader Provides a helper object containing methods to read row data into object properties. Declaration PocoReader ObjectReader { get; } Property Value Type Description PocoReader Methods CountAll(Type) Counts all rows for the given table-mapped type. Declaration int CountAll(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Int32 The number of rows in the table. CountAllAsync(Type) Asynchronously counts all rows for the given table-mapped type. Declaration Task<int> CountAllAsync(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Task < Int32 > The number of rows in the table. Delete(Object) Deletes the row with matching object key values. Declaration int Delete(object item) Parameters Type Name Description Object item The object to delete from the table. Returns Type Description Int32 The number of affected rows. DeleteAsync(Object) Asynchronously deletes the row with matching object key values. Declaration Task<int> DeleteAsync(object item) Parameters Type Name Description Object item The object to delete from the table. Returns Type Description Task < Int32 > The number of affected rows. Insert(Object, Boolean) Inserts an item to its corresponding mapped table. If the object has an autogenerated key, the object will have its value updated. Declaration int Insert(object item, bool update) Parameters Type Name Description Object item The item. Boolean update if set to true it updates all data values from the store after the insert (in addition to autogenerated key values). Returns Type Description Int32 The number of affected rows. InsertAsync(Object, Boolean) Asynchronously inserts an item to its corresponding mapped table. If the object has an autogenerated key, the object will have its value updated. Declaration Task<int> InsertAsync(object item, bool update) Parameters Type Name Description Object item The item to insert. Boolean update if set to true it updates all data values from the store after the insert (in addition to autogenerated key values). Returns Type Description Task < Int32 > The number of affected rows. InsertMany(IEnumerable, Boolean) Inserts a collection of items into their corresponding table-mapped type. The collection must exclusively be of objects of the same type. Declaration int InsertMany(IEnumerable items, bool update) Parameters Type Name Description IEnumerable items The items to insert. Boolean update if set to true it will update data from inserted rows in addition to generated key values. Returns Type Description Int32 The number of affected rows. InsertManyAsync(IEnumerable, Boolean) Asynchronously inserts a collection of items into their corresponding table-mapped type. The collection must exclusively be of objects of the same type. Declaration Task<int> InsertManyAsync(IEnumerable items, bool update) Parameters Type Name Description IEnumerable items The items to insert. Boolean update if set to true it will update data from inserted rows in addition to generated key values. Returns Type Description Task < Int32 > The number of affected rows. SelectAll(Type) Selects all records of the given table-mapped type. Declaration IEnumerable SelectAll(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description IEnumerable An enumerable collection of the records that were retrieved. SelectAll<T>() Selects all records of the given table-mapped type. Declaration IEnumerable<T> SelectAll<T>() where T : class, new() Returns Type Description IEnumerable <T> An enumerable collection of the records that were retrieved. Type Parameters Name Description T The table-mapped type. SelectAllAsync(Type) Asynchronously selects all records of the given table-mapped type. Declaration Task<IEnumerable> SelectAllAsync(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Task < IEnumerable > An enumerable collection of the records that were retrieved. SelectAllAsync<T>() Asynchronously selects all records of the given table-mapped type. Declaration Task<IEnumerable<T>> SelectAllAsync<T>() where T : class, new() Returns Type Description Task < IEnumerable <T>> An enumerable collection of the records that were retrieved. Type Parameters Name Description T The table-mapped type. SelectMany(Type, IDbCommand) Executes the specified command and reads the results as records of the given table-mapped type. Declaration IEnumerable SelectMany(Type mappedType, IDbCommand command) Parameters Type Name Description Type mappedType The table-mapped type. IDbCommand command The command. Returns Type Description IEnumerable An enumerable collection of the records that were retrieved. SelectMany<T>(IDbCommand) Executes the specified command and reads the results as records of the given table-mapped type. Declaration IEnumerable<T> SelectMany<T>(IDbCommand command) where T : class, new() Parameters Type Name Description IDbCommand command The command. Returns Type Description IEnumerable <T> An enumerable collection of the records that were retrieved. Type Parameters Name Description T The table-mapped type. SelectManyAsync(Type, IDbCommand) Asynchronously executes the specified command and reads the results as records of the given table-mapped type. Declaration Task<IEnumerable> SelectManyAsync(Type mappedType, IDbCommand command) Parameters Type Name Description Type mappedType The table-mapped type. IDbCommand command The command. Returns Type Description Task < IEnumerable > An enumerable collection of the records that were retrieved. SelectManyAsync<T>(IDbCommand) Asynchronously executes the specified command and reads the results as records of the given table-mapped type. Declaration Task<IEnumerable<T>> SelectManyAsync<T>(IDbCommand command) where T : class, new() Parameters Type Name Description IDbCommand command The command. Returns Type Description Task < IEnumerable <T>> An enumerable collection of the records that were retrieved. Type Parameters Name Description T The table-mapped type. SelectSingle(Object) Selects a single record with matching keys of the given object and updates it with record data. Declaration bool SelectSingle(object target) Parameters Type Name Description Object target The target object to update. Returns Type Description Boolean Whether the object was found and updated. SelectSingleAsync(Object) Asynchronously selects a single record with matching keys of the given object and updates it with record data. Declaration Task<bool> SelectSingleAsync(object target) Parameters Type Name Description Object target The target object to update. Returns Type Description Task < Boolean > Whether the object was found and updated. TableProxy<T>() Gets a dynamically generated table proxy containing methods to perform CRUD operations on the given table-mapped type. Declaration PocoTableProxy<T> TableProxy<T>() where T : class, new() Returns Type Description PocoTableProxy <T> The table proxy. Type Parameters Name Description T The type mapped to a database table. Update(Object) Updates an item in its corresponding mapped table. Declaration int Update(object item) Parameters Type Name Description Object item The item to update. Returns Type Description Int32 The number of affected rows. UpdateAsync(Object) Updates an item in its corresponding mapped table. Declaration Task<int> UpdateAsync(object item) Parameters Type Name Description Object item The item. Returns Type Description Task < Int32 > The number of affected rows. UpdateMany(IEnumerable) Updates a collection of items in their corresponding table-mapped type. The collection must exclusively be of objects of the same type. Declaration int UpdateMany(IEnumerable items) Parameters Type Name Description IEnumerable items The items to update. Returns Type Description Int32 The number of affected rows. UpdateManyAsync(IEnumerable) Asynchronously updates a collection of items in their corresponding table-mapped type. The collection must exclusively be of objects of the same type. Declaration Task<int> UpdateManyAsync(IEnumerable items) Parameters Type Name Description IEnumerable items The items to update. Returns Type Description Task < Int32 > The number of affected rows. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.IPocoDefinition.html": {
    "href": "api/Unosquare.PocoData.IPocoDefinition.html",
    "title": "Interface IPocoDefinition | Unosquare PocoData",
    "keywords": "Interface IPocoDefinition Provides methods to execute DDL commands on the database. Namespace : Unosquare.PocoData Syntax public interface IPocoDefinition Methods CreateTableAsync(Type) Asynchronously creates a table of the corresponding table-mapped type. Declaration Task<int> CreateTableAsync(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Task < Int32 > The number of affected rows, typically -1. CreateTableAsync<T>() Asynchronously creates a table of the corresponding table-mapped type. Declaration Task<int> CreateTableAsync<T>() Returns Type Description Task < Int32 > The number of affected rows, typically -1. Type Parameters Name Description T The table-mapped type. DropTableAsync(Type) Asynchronously deletes a table of the corresponding table-mapped type. Declaration Task DropTableAsync(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Task The awaitable task. DropTableAsync<T>() Asynchronously deletes a table of the corresponding table-mapped type. Declaration Task DropTableAsync<T>() Returns Type Description Task The awaitable task. Type Parameters Name Description T The table-mapped type. TableExistsAsync(Type) Determines if the table for the table-mapped type exists. Declaration Task<bool> TableExistsAsync(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Task < Boolean > Whether or not the table exists. TableExistsAsync<T>() Determines if the table for the table-mapped type exists. Declaration Task<bool> TableExistsAsync<T>() Returns Type Description Task < Boolean > Whether or not the table exists. Type Parameters Name Description T The table-mapped type. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.PocoReader.html": {
    "href": "api/Unosquare.PocoData.PocoReader.html",
    "title": "Class PocoReader | Unosquare PocoData",
    "keywords": "Class PocoReader Provides helper methods to read row data into POCOs. Inheritance Object PocoReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData Syntax public sealed class PocoReader Properties Instance Gets the singleton instance of this class. Declaration public static PocoReader Instance { get; } Property Value Type Description PocoReader Methods ReadObject(IDataReader, Object) Reads data reader data into the corresponding table-mapped object. Declaration public object ReadObject(IDataReader reader, object item) Parameters Type Name Description IDataReader reader The reader. Object item The table-mapped object. Returns Type Description Object The resulting table-mapped object. Exceptions Type Condition InvalidCastException Unable to convert '{fieldValue.GetType().Name}' to '{property.NativeType.Name}' for column '{property.ColumnName}. ReadObject<T>(IDataReader) Reads data reader data into the corresponding table-mapped object. Declaration public T ReadObject<T>(IDataReader reader) where T : class, new() Parameters Type Name Description IDataReader reader The reader. Returns Type Description T The object that was read. Type Parameters Name Description T The table-mapped type. ReadObject<T>(IDataReader, T) Reads data reader data into the corresponding table-mapped object. Declaration public T ReadObject<T>(IDataReader reader, T result) where T : class Parameters Type Name Description IDataReader reader The reader. T result The the object to read into. Returns Type Description T The object that was read. Type Parameters Name Description T The table-mapped type. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.PocoSchema.html": {
    "href": "api/Unosquare.PocoData.PocoSchema.html",
    "title": "Class PocoSchema | Unosquare PocoData",
    "keywords": "Class PocoSchema Storeas table and column mappings and their corresponding metadata. Inheritance Object PocoSchema Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData Syntax public sealed class PocoSchema Properties Instance Gets the singleton instance of this class. Declaration public static PocoSchema Instance { get; } Property Value Type Description PocoSchema StandardValueTypes Gets a list of the standard value types. Declaration public static IReadOnlyList<Type> StandardValueTypes { get; } Property Value Type Description IReadOnlyList < Type > Methods Columns(Type) Provides column metadata for the specified table-mapped type. Declaration public IReadOnlyList<ColumnMetadata> Columns(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description IReadOnlyList < ColumnMetadata > A list with column metadata. Columns<T>() Provides column metadata for the specified table-mapped type. Declaration public IReadOnlyList<ColumnMetadata> Columns<T>() where T : class Returns Type Description IReadOnlyList < ColumnMetadata > A list with column metadata. Type Parameters Name Description T The table-mapped type. Table(Type) Provides table metadata for the specified table-mapped type. Declaration public TableAttribute Table(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description TableAttribute The table attributes applied to the type. Table<T>() Provides table metadata for the specified table-mapped type. Declaration public TableAttribute Table<T>() where T : class Returns Type Description TableAttribute The table attributes applied to the type. Type Parameters Name Description T The table-mapped type. Validate(Type) Validates that the specified table-mapped type has appropriate attributes applied so it can be stored in its corresponding table. Declaration public void Validate(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Validate<T>() Validates that the specified table-mapped type has appropriate attributes applied so it can be stored in its corresponding table. Declaration public void Validate<T>() where T : class Type Parameters Name Description T The table-mapped type. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.Sql.SqlPocoDb.html": {
    "href": "api/Unosquare.PocoData.Sql.SqlPocoDb.html",
    "title": "Class SqlPocoDb | Unosquare PocoData",
    "keywords": "Class SqlPocoDb Provides a SQL Server-specific implementation of a POCO database functionality. Inheritance Object SqlPocoDb Implements IPocoDb IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData.Sql Syntax public class SqlPocoDb : IPocoDb, IDisposable Constructors SqlPocoDb(String) Initializes a new instance of the SqlPocoDb class. Declaration public SqlPocoDb(string connectionString) Parameters Type Name Description String connectionString The connection string. Properties Commands Provides a helper object containing methods to generate commands for standard operations. Declaration public IPocoCommands Commands { get; } Property Value Type Description IPocoCommands Connection Gets the database connection object. Declaration public IDbConnection Connection { get; } Property Value Type Description IDbConnection Definition Provides a helper object containing methods to create and delete tables. Declaration public IPocoDefinition Definition { get; } Property Value Type Description IPocoDefinition ObjectReader Provides a helper object containing methods to read row data into object properties. Declaration public PocoReader ObjectReader { get; } Property Value Type Description PocoReader Schema Provides access to the global schema store. Declaration public PocoSchema Schema { get; } Property Value Type Description PocoSchema SqlCommandTimeoutSeconds Gets or sets the command execution timeout in seconds. Declaration public int SqlCommandTimeoutSeconds { get; set; } Property Value Type Description Int32 Methods CountAll(Type) Counts all rows for the given table-mapped type. Declaration public int CountAll(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Int32 The number of rows in the table. CountAllAsync(Type) Asynchronously counts all rows for the given table-mapped type. Declaration public Task<int> CountAllAsync(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Task < Int32 > The number of rows in the table. Delete(Object) Deletes the row with matching object key values. Declaration public int Delete(object item) Parameters Type Name Description Object item The object to delete from the table. Returns Type Description Int32 The number of affected rows. DeleteAsync(Object) Asynchronously deletes the row with matching object key values. Declaration public Task<int> DeleteAsync(object item) Parameters Type Name Description Object item The object to delete from the table. Returns Type Description Task < Int32 > The number of affected rows. Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Insert(Object, Boolean) Inserts an item to its corresponding mapped table. If the object has an autogenerated key, the object will have its value updated. Declaration public int Insert(object item, bool update) Parameters Type Name Description Object item The item. Boolean update if set to true it updates all data values from the store after the insert (in addition to autogenerated key values). Returns Type Description Int32 The number of affected rows. InsertAsync(Object, Boolean) Asynchronously inserts an item to its corresponding mapped table. If the object has an autogenerated key, the object will have its value updated. Declaration public Task<int> InsertAsync(object item, bool update) Parameters Type Name Description Object item The item to insert. Boolean update if set to true it updates all data values from the store after the insert (in addition to autogenerated key values). Returns Type Description Task < Int32 > The number of affected rows. InsertMany(IEnumerable, Boolean) Inserts a collection of items into their corresponding table-mapped type. The collection must exclusively be of objects of the same type. Declaration public int InsertMany(IEnumerable targetItems, bool update) Parameters Type Name Description IEnumerable targetItems Boolean update if set to true it will update data from inserted rows in addition to generated key values. Returns Type Description Int32 The number of affected rows. InsertManyAsync(IEnumerable, Boolean) Asynchronously inserts a collection of items into their corresponding table-mapped type. The collection must exclusively be of objects of the same type. Declaration public Task<int> InsertManyAsync(IEnumerable targetItems, bool update) Parameters Type Name Description IEnumerable targetItems Boolean update if set to true it will update data from inserted rows in addition to generated key values. Returns Type Description Task < Int32 > The number of affected rows. Open(String) Opens the database using the specified connection string. Declaration public static SqlPocoDb Open(string connectionString) Parameters Type Name Description String connectionString The connection string. Returns Type Description SqlPocoDb The database container object. Open(String, String, String, String) Opens the database using the specified common parameters. Declaration public static SqlPocoDb Open(string host, string username, string password, string databaseName) Parameters Type Name Description String host The host. String username The username. String password The password. String databaseName Name of the database. Returns Type Description SqlPocoDb The database container object. OpenAsync(String) Asynchronously opens the connection in a new database container object. Declaration public static Task<SqlPocoDb> OpenAsync(string connectionString) Parameters Type Name Description String connectionString The connection string. Returns Type Description Task < SqlPocoDb > The database container object. OpenAsync(String, String, String, String) Asynchronously opens the connection in a new database container object. Declaration public static Task<SqlPocoDb> OpenAsync(string host, string username, string password, string databaseName) Parameters Type Name Description String host The host. String username The username. String password The password. String databaseName Name of the database. Returns Type Description Task < SqlPocoDb > The database container object. OpenLocal(String) Opens a connection to the local server with integrated credentials and using the specified database name. Declaration public static SqlPocoDb OpenLocal(string databaseName) Parameters Type Name Description String databaseName Name of the database. Returns Type Description SqlPocoDb The database container object. OpenLocalAsync(String) Asynchronously opens a connection to the local server with integrated credentials and using the specified database name. Declaration public static Task<SqlPocoDb> OpenLocalAsync(string databaseName) Parameters Type Name Description String databaseName Name of the database. Returns Type Description Task < SqlPocoDb > The database container object. SelectAll(Type) Selects all records of the given table-mapped type. Declaration public IEnumerable SelectAll(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description IEnumerable An enumerable collection of the records that were retrieved. SelectAll<T>() Selects all records of the given table-mapped type. Declaration public IEnumerable<T> SelectAll<T>() where T : class, new() Returns Type Description IEnumerable <T> An enumerable collection of the records that were retrieved. Type Parameters Name Description T The table-mapped type. SelectAllAsync(Type) Asynchronously selects all records of the given table-mapped type. Declaration public Task<IEnumerable> SelectAllAsync(Type mappedType) Parameters Type Name Description Type mappedType The table-mapped type. Returns Type Description Task < IEnumerable > An enumerable collection of the records that were retrieved. SelectAllAsync<T>() Asynchronously selects all records of the given table-mapped type. Declaration public Task<IEnumerable<T>> SelectAllAsync<T>() where T : class, new() Returns Type Description Task < IEnumerable <T>> An enumerable collection of the records that were retrieved. Type Parameters Name Description T The table-mapped type. SelectMany(Type, IDbCommand) Executes the specified command and reads the results as records of the given table-mapped type. Declaration public IEnumerable SelectMany(Type mappedType, IDbCommand command) Parameters Type Name Description Type mappedType The table-mapped type. IDbCommand command The command. Returns Type Description IEnumerable An enumerable collection of the records that were retrieved. SelectMany<T>(IDbCommand) Executes the specified command and reads the results as records of the given table-mapped type. Declaration public IEnumerable<T> SelectMany<T>(IDbCommand command) where T : class, new() Parameters Type Name Description IDbCommand command The command. Returns Type Description IEnumerable <T> An enumerable collection of the records that were retrieved. Type Parameters Name Description T The table-mapped type. SelectManyAsync(Type, IDbCommand) Asynchronously executes the specified command and reads the results as records of the given table-mapped type. Declaration public Task<IEnumerable> SelectManyAsync(Type mappedType, IDbCommand command) Parameters Type Name Description Type mappedType The table-mapped type. IDbCommand command The command. Returns Type Description Task < IEnumerable > An enumerable collection of the records that were retrieved. SelectManyAsync<T>(IDbCommand) Asynchronously executes the specified command and reads the results as records of the given table-mapped type. Declaration public Task<IEnumerable<T>> SelectManyAsync<T>(IDbCommand command) where T : class, new() Parameters Type Name Description IDbCommand command The command. Returns Type Description Task < IEnumerable <T>> An enumerable collection of the records that were retrieved. Type Parameters Name Description T The table-mapped type. SelectSingle(Object) Selects a single record with matching keys of the given object and updates it with record data. Declaration public bool SelectSingle(object target) Parameters Type Name Description Object target The target object to update. Returns Type Description Boolean Whether the object was found and updated. SelectSingleAsync(Object) Asynchronously selects a single record with matching keys of the given object and updates it with record data. Declaration public Task<bool> SelectSingleAsync(object target) Parameters Type Name Description Object target The target object to update. Returns Type Description Task < Boolean > Whether the object was found and updated. TableProxy<T>() Gets a dynamically generated table proxy containing methods to perform CRUD operations on the given table-mapped type. Declaration public PocoTableProxy<T> TableProxy<T>() where T : class, new() Returns Type Description PocoTableProxy <T> The table proxy. Type Parameters Name Description T The type mapped to a database table. Update(Object) Updates an item in its corresponding mapped table. Declaration public int Update(object item) Parameters Type Name Description Object item The item to update. Returns Type Description Int32 The number of affected rows. UpdateAsync(Object) Updates an item in its corresponding mapped table. Declaration public Task<int> UpdateAsync(object item) Parameters Type Name Description Object item The item. Returns Type Description Task < Int32 > The number of affected rows. UpdateMany(IEnumerable) Updates a collection of items in their corresponding table-mapped type. The collection must exclusively be of objects of the same type. Declaration public int UpdateMany(IEnumerable targetItems) Parameters Type Name Description IEnumerable targetItems Returns Type Description Int32 The number of affected rows. UpdateManyAsync(IEnumerable) Asynchronously updates a collection of items in their corresponding table-mapped type. The collection must exclusively be of objects of the same type. Declaration public Task<int> UpdateManyAsync(IEnumerable targetItems) Parameters Type Name Description IEnumerable targetItems Returns Type Description Task < Int32 > The number of affected rows. Implements IPocoDb System.IDisposable See Also IPocoDb IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.Sql.SqlPocoUtilities.html": {
    "href": "api/Unosquare.PocoData.Sql.SqlPocoUtilities.html",
    "title": "Class SqlPocoUtilities | Unosquare PocoData",
    "keywords": "Class SqlPocoUtilities Provides extension methods for database commands and their parameters. Inheritance Object SqlPocoUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData.Sql Syntax public static class SqlPocoUtilities Methods AddOrUpdateParameters(SqlCommand, IEnumerable<ColumnMetadata>, Object) Adds or updates the parameters for the specified command using column mappings. Declaration public static void AddOrUpdateParameters(this SqlCommand command, IEnumerable<ColumnMetadata> columns, object item) Parameters Type Name Description SqlCommand command The command to add or change parameters from. IEnumerable < ColumnMetadata > columns The column metadata. Object item The table-mapped object containing the values to inject as parameters. AddParameter(SqlCommand, String, Object, Int32) Adds a parameter to the given SQL command. Declaration public static SqlParameter AddParameter(this SqlCommand command, string parameterName, object value, int size = -1) Parameters Type Name Description SqlCommand command The command. String parameterName Name of the parameter. Object value The value. Int32 size The size. Returns Type Description SqlParameter The SQL Parameter. DebugCommand(IDbCommand, Boolean) Provides a text-based representation of the command and its parameters. Declaration public static string DebugCommand(this IDbCommand command, bool outputToConsole = true) Parameters Type Name Description IDbCommand command The command. Boolean outputToConsole if set to true it will output to the console. Returns Type Description String The string representation of the command and its parameters. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PocoData.Annotations.ColumnAttribute.html": {
    "href": "api/Unosquare.PocoData.Annotations.ColumnAttribute.html",
    "title": "Class ColumnAttribute | Unosquare PocoData",
    "keywords": "Class ColumnAttribute Maps a property to a column name. Inheritance Object Attribute ColumnAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PocoData.Annotations Syntax [AttributeUsage(AttributeTargets.Property)] public class ColumnAttribute : Attribute, _Attribute Constructors ColumnAttribute(String) Initializes a new instance of the ColumnAttribute class. Declaration public ColumnAttribute(string name) Parameters Type Name Description String name The name of the column. Properties Name Gets the name of the column. Declaration public string Name { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute See Also Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  }
}